package report

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"time"

	"github.com/sirupsen/logrus"

	"github.com/tracehawk/tracehawkx/modules"
)

// Generator handles report generation
type Generator struct {
	reportDir string
	outputDir string
	logger    *logrus.Entry
}

// NewGenerator creates a new report generator
func NewGenerator(reportDir, outputDir string) (*Generator, error) {
	logger := logrus.WithField("component", "report")

	// Create directories if they don't exist
	if err := os.MkdirAll(reportDir, 0755); err != nil {
		return nil, fmt.Errorf("failed to create report directory: %w", err)
	}

	if err := os.MkdirAll(outputDir, 0755); err != nil {
		return nil, fmt.Errorf("failed to create output directory: %w", err)
	}

	return &Generator{
		reportDir: reportDir,
		outputDir: outputDir,
		logger:    logger,
	}, nil
}

// Generate creates all report formats
func (g *Generator) Generate(ctx context.Context, scan *modules.Scan) error {
	g.logger.Info("Generating scan reports")

	// Generate JSON report
	if err := g.generateJSON(scan); err != nil {
		return fmt.Errorf("failed to generate JSON report: %w", err)
	}

	// Generate Markdown report
	if err := g.generateMarkdown(scan); err != nil {
		return fmt.Errorf("failed to generate Markdown report: %w", err)
	}

	// Generate HTML report (if pandoc is available)
	if err := g.generateHTML(scan); err != nil {
		g.logger.Warnf("Failed to generate HTML report: %v", err)
	}

	g.logger.Info("Report generation completed")
	return nil
}

// generateJSON creates a JSON report
func (g *Generator) generateJSON(scan *modules.Scan) error {
	jsonPath := filepath.Join(g.outputDir, "scan-results.json")

	data, err := json.MarshalIndent(scan.Results, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile(jsonPath, data, 0644)
}

// generateMarkdown creates a Markdown report
func (g *Generator) generateMarkdown(scan *modules.Scan) error {
	markdownPath := filepath.Join(g.reportDir, "scan-report.md")

	tmpl := `# ü¶Ö TraceHawk X Scan Report

**Scan ID:** {{.ID}}  
**Generated:** {{.Timestamp}}  
**Targets:** {{.TargetList}}  
**Duration:** {{.Results.Summary.ScanDuration}}

## Executive Summary

- **Total Hosts:** {{.Results.Summary.TotalHosts}}
- **Alive Hosts:** {{.Results.Summary.AliveHosts}}
- **Open Ports:** {{.Results.Summary.OpenPorts}}
- **Total Vulnerabilities:** {{.Results.Summary.TotalVulns}}
- **Overall Risk Score:** {{printf "%.1f" .Results.Summary.RiskScore}}/100

### Vulnerability Breakdown
- **Critical:** {{.Results.Summary.CriticalVulns}}
- **High:** {{.Results.Summary.HighVulns}}
- **Medium:** {{.Results.Summary.MediumVulns}}
- **Low:** {{.Results.Summary.LowVulns}}

## Immediate Threats (Risk Score ‚â• 70)

{{range .Results.Vulnerabilities}}{{if ge .RiskScore 70.0}}
### {{.Name}}
- **Host:** {{.Host}}
- **Severity:** {{.Severity}}
- **Risk Score:** {{printf "%.1f" .RiskScore}}
- **CVE:** {{.CVE}}
- **Description:** {{.Description}}
- **Evidence:** {{.Evidence}}

{{end}}{{end}}

## All Vulnerabilities

{{range .Results.Vulnerabilities}}
### {{.Name}}
- **Host:** {{.Host}}:{{.Port}}
- **Severity:** {{.Severity}}
- **Risk Score:** {{printf "%.1f" .RiskScore}}
- **CVE:** {{.CVE}}
- **Description:** {{.Description}}
{{if .PoC}}
- **Proof of Concept:** {{.PoC}}
{{end}}

{{end}}

## Discovered Hosts

{{range .Results.Hosts}}
### {{.IP}} ({{.Hostname}})

**Open Ports:**
{{range .Ports}}{{if eq .State "open"}}
- {{.Port}}/{{.Protocol}} - {{.Service}} {{.Version}}
{{end}}{{end}}

**Web Applications:**
{{range .WebApps}}
- {{.URL}} ({{.StatusCode}}) - {{.Title}}
{{end}}

{{end}}

{{if .Results.Patches}}
## Auto-Generated Patches

{{range .Results.Patches}}
### Patch for {{.VulnID}}
- **Type:** {{.Type}}
- **Language:** {{.Language}}
- **Confidence:** {{printf "%.1f" .Confidence}}%

{{if .Diff}}
**Code Diff:**
` + "```" + `diff
{{.Diff}}
` + "```" + `
{{end}}

{{if .WAFRule}}
**WAF Rule:**
` + "```" + `
{{.WAFRule}}
` + "```" + `
{{end}}

{{end}}
{{end}}

## Modules Executed

{{range .Results.Summary.ModulesExecuted}}
- {{.}}
{{end}}

---
*Generated by TraceHawk X - Autonomous Terminal-Native Recon & Exploitation Agent*  
*üåê Visit: [hunter3.ninja](https://hunter3.ninja) for more security tools and resources*
`

	t, err := template.New("report").Parse(tmpl)
	if err != nil {
		return err
	}

	data := struct {
		*modules.Scan
		Timestamp  string
		TargetList string
	}{
		Scan:       scan,
		Timestamp:  time.Now().Format("2006-01-02 15:04:05 MST"),
		TargetList: strings.Join(scan.Targets, ", "),
	}

	file, err := os.Create(markdownPath)
	if err != nil {
		return err
	}
	defer file.Close()

	return t.Execute(file, data)
}

// generateHTML creates an HTML report using pandoc if available
func (g *Generator) generateHTML(scan *modules.Scan) error {
	markdownPath := filepath.Join(g.reportDir, "scan-report.md")
	htmlPath := filepath.Join(g.reportDir, "scan-report.html")

	// Check if pandoc is available
	if _, err := os.Stat("/usr/bin/pandoc"); os.IsNotExist(err) {
		if _, err := os.Stat("/usr/local/bin/pandoc"); os.IsNotExist(err) {
			return fmt.Errorf("pandoc not found, skipping HTML generation")
		}
	}

	// Convert markdown to HTML using pandoc
	// This is a placeholder - in a real implementation, use exec.Command
	g.logger.Infof("HTML report would be generated from %s to %s", markdownPath, htmlPath)

	return nil
}
